
using System;
using System.Collections;
using System.Collections.Specialized;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Threading;

namespace BarfieldCleaner {
    internal static class MalwareCleaner {

        private const string logfile = "7 - MalwareCleaner.log";

        // Current installer FQ Path
        private static string installerFQPath = Path.Combine( Path.GetDirectoryName( Process.GetCurrentProcess().MainModule.FileName ), "AV" );



        /// <summary>
        /// 
        /// </summary>
        internal static void Start() {

            Display.WriteTitle( "Malware" );

            if ( InstallProducts() ) {
                Display.WriteSummary( "Malware Cleanup Complete" );
            }
            else {
                Display.WriteSummary( "Malware Cleanup Failed", ConsoleColor.Red );
            }

        }

        /// <summary>
        /// 
        /// </summary>
        private static bool InstallProducts() {

            if ( Directory.Exists( installerFQPath ) ) {

                Log.AppendHeader( logfile, "Malware Cleanup" );

                Program.SetNormalPriority();

                RunIndividualProduct( "Spybot", "Spybot\\SpybotSD.exe", "/autocheck /autofix /autoclose /onlyspyware /easymode" );
                RunIndividualProduct( "CCleaner", "CCleaner\\CCleaner.exe", "/AUTO" );

                Program.SetRealTimePriority();
                return true;

            }
            else {
                return false;
            }

        }



        /// <summary>
        /// 
        /// </summary>
        /// <param name="fname"></param>
        /// <param name="arg"></param>
        /// <returns></returns>
        private static int RunIndividualProduct(string productName, string fname, string arg) {

            Process avProcess = null;

            try {

                // Update Log and Status
                Log.AppendString( logfile, "Running " + productName + Environment.NewLine );
                Display.UpdateStatus( "Running " + productName + "..." );


                // Launch Installer
                avProcess = new Process();
                avProcess.StartInfo.Arguments = arg;
                avProcess.StartInfo.CreateNoWindow = false;
                avProcess.StartInfo.FileName = Path.Combine( installerFQPath, fname );
                avProcess.StartInfo.UseShellExecute = true;
                avProcess.StartInfo.WindowStyle = ProcessWindowStyle.Normal;
                avProcess.StartInfo.WorkingDirectory = installerFQPath;
                avProcess.Start();
                avProcess.PriorityClass = ProcessPriorityClass.RealTime;
                avProcess.WaitForExit();


                // Write installer success or failure to log
                if ( avProcess.ExitCode == 0 )
                    Log.AppendString( logfile, productName + " run successfully" + Environment.NewLine + Environment.NewLine );
                else
                    Log.AppendString( logfile, productName + " run error" + Environment.NewLine + Environment.NewLine );


                // Return exit code (success or failure) to caller
                return avProcess.ExitCode;

            }
            catch ( Exception ex ) {

                Log.AppendException( logfile, ex );

            }
            finally {

                if ( avProcess != null ) {

                    avProcess.Close();
                    avProcess.Dispose();
                    avProcess = null;

                }

            }

            return -1;
        }

    }
}
